// Updated Firestore Security Rules for three separate collections

rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // ===== USERS COLLECTION =====
    // Allow users to read and write their own user document in users collection
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // Allow users to read and write their own stats document in userStats collection
    match /userStats/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
    }
    
    // ===== NGO MEMBERS COLLECTION =====
    // Allow NGO members to read and write their own document in ngo_members collection
    match /ngo_members/{memberId} {
      allow read, write: if request.auth != null && request.auth.uid == memberId;
    }
    
    // Allow authenticated users to read all NGO members (for admin dashboard)
    match /ngo_members/{memberId} {
      allow read: if request.auth != null;
    }
    
    // Allow NGO member stats
    match /ngoMemberStats/{memberId} {
      allow read, write: if request.auth != null && request.auth.uid == memberId;
    }
    
    // ===== ADMINS COLLECTION =====
    // Allow admins to read and write their own admin document
    match /admins/{adminId} {
      allow read, write: if request.auth != null && request.auth.uid == adminId;
      // Allow initial admin creation during app setup
      allow create: if request.auth != null;
    }
    
    // Allow authenticated users to read admin info (for admin checks)
    match /admins/{adminId} {
      allow read: if request.auth != null;
    }
    
    // ===== NGOs COLLECTION =====
    // Allow reading NGO documents for authenticated users
    match /ngos/{ngoId} {
      allow read: if request.auth != null;
      // Allow admins to create new NGOs
      allow create: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      // Allow NGOs to update their own document OR allow admins to update any NGO
      allow update: if request.auth != null && 
        (request.auth.uid == ngoId || 
         exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
      // Allow admins to delete NGOs
      allow delete: if request.auth != null && 
        exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
    
    // ===== SHARED COLLECTIONS =====
    // Allow authenticated users to read and write donation requests
    match /donation_requests/{document} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write volunteer opportunities
    match /volunteer_opportunities/{document} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write events
    match /events/{document} {
      allow read, write: if request.auth != null;
    }
    
    // Allow authenticated users to read and write posts/updates
    match /posts/{document} {
      allow read, write: if request.auth != null;
    }
  }
}
